# Makefile.in generated by automake 1.15 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@



VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
@HAVE_GUDEV_FALSE@libexec_PROGRAMS = gsd-test-wacom$(EXEEXT) \
@HAVE_GUDEV_FALSE@	gsd-list-wacom$(EXEEXT) \
@HAVE_GUDEV_FALSE@	gsd-test-wacom-osd$(EXEEXT)
@HAVE_GUDEV_TRUE@libexec_PROGRAMS = gsd-wacom-led-helper$(EXEEXT) \
@HAVE_GUDEV_TRUE@	gsd-wacom-oled-helper$(EXEEXT) \
@HAVE_GUDEV_TRUE@	gsd-test-wacom$(EXEEXT) \
@HAVE_GUDEV_TRUE@	gsd-list-wacom$(EXEEXT) \
@HAVE_GUDEV_TRUE@	gsd-test-wacom-osd$(EXEEXT)
subdir = plugins/wacom
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(libexecdir)" \
	"$(DESTDIR)$(plugindir)" "$(DESTDIR)$(polkit_policydir)"
LTLIBRARIES = $(plugin_LTLIBRARIES)
am__DEPENDENCIES_1 =
libgsdwacom_la_DEPENDENCIES =  \
	$(top_builddir)/plugins/common/libcommon.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am_libgsdwacom_la_OBJECTS = libgsdwacom_la-gsd-wacom-plugin.lo \
	libgsdwacom_la-gsd-wacom-manager.lo \
	libgsdwacom_la-gsd-wacom-key-shortcut-button.lo \
	libgsdwacom_la-gsd-wacom-button-editor.lo \
	libgsdwacom_la-gsd-wacom-osd-window.lo \
	libgsdwacom_la-gsd-wacom-oled.lo \
	libgsdwacom_la-gsd-wacom-device.lo \
	libgsdwacom_la-gsd-wacom-resources.lo
libgsdwacom_la_OBJECTS = $(am_libgsdwacom_la_OBJECTS)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
libgsdwacom_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(libgsdwacom_la_CFLAGS) $(CFLAGS) $(libgsdwacom_la_LDFLAGS) \
	$(LDFLAGS) -o $@
PROGRAMS = $(libexec_PROGRAMS)
am_gsd_list_wacom_OBJECTS = gsd_list_wacom-list-wacom.$(OBJEXT) \
	gsd_list_wacom-gsd-wacom-device.$(OBJEXT)
gsd_list_wacom_OBJECTS = $(am_gsd_list_wacom_OBJECTS)
gsd_list_wacom_DEPENDENCIES =  \
	$(top_builddir)/gnome-settings-daemon/libgsd.la \
	$(top_builddir)/plugins/common/libcommon.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
gsd_list_wacom_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(gsd_list_wacom_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \
	$@
am_gsd_test_wacom_OBJECTS = gsd_test_wacom-test-wacom.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-manager.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-key-shortcut-button.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-button-editor.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-osd-window.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-oled.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-device.$(OBJEXT) \
	gsd_test_wacom-gsd-wacom-resources.$(OBJEXT)
gsd_test_wacom_OBJECTS = $(am_gsd_test_wacom_OBJECTS)
gsd_test_wacom_DEPENDENCIES =  \
	$(top_builddir)/gnome-settings-daemon/libgsd.la \
	$(top_builddir)/plugins/common/libcommon.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
gsd_test_wacom_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(gsd_test_wacom_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \
	$@
am_gsd_test_wacom_osd_OBJECTS =  \
	gsd_test_wacom_osd-test-osd-window.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-button-editor.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-osd-window.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-device.$(OBJEXT) \
	gsd_test_wacom_osd-gsd-wacom-resources.$(OBJEXT)
gsd_test_wacom_osd_OBJECTS = $(am_gsd_test_wacom_osd_OBJECTS)
gsd_test_wacom_osd_DEPENDENCIES =  \
	$(top_builddir)/gnome-settings-daemon/libgsd.la \
	$(top_builddir)/plugins/common/libcommon.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
gsd_test_wacom_osd_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
am_gsd_wacom_led_helper_OBJECTS =  \
	gsd_wacom_led_helper-gsd-wacom-led-helper.$(OBJEXT)
gsd_wacom_led_helper_OBJECTS = $(am_gsd_wacom_led_helper_OBJECTS)
gsd_wacom_led_helper_LDADD = $(LDADD)
gsd_wacom_led_helper_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(gsd_wacom_led_helper_CFLAGS) $(CFLAGS) \
	$(gsd_wacom_led_helper_LDFLAGS) $(LDFLAGS) -o $@
am_gsd_wacom_oled_helper_OBJECTS =  \
	gsd_wacom_oled_helper-gsd-wacom-oled-helper.$(OBJEXT)
gsd_wacom_oled_helper_OBJECTS = $(am_gsd_wacom_oled_helper_OBJECTS)
gsd_wacom_oled_helper_LDADD = $(LDADD)
gsd_wacom_oled_helper_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(gsd_wacom_oled_helper_CFLAGS) $(CFLAGS) \
	$(gsd_wacom_oled_helper_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(libgsdwacom_la_SOURCES) $(gsd_list_wacom_SOURCES) \
	$(gsd_test_wacom_SOURCES) $(gsd_test_wacom_osd_SOURCES) \
	$(gsd_wacom_led_helper_SOURCES) \
	$(gsd_wacom_oled_helper_SOURCES)
DIST_SOURCES = $(libgsdwacom_la_SOURCES) $(gsd_list_wacom_SOURCES) \
	$(gsd_test_wacom_SOURCES) $(gsd_test_wacom_osd_SOURCES) \
	$(gsd_wacom_led_helper_SOURCES) \
	$(gsd_wacom_oled_helper_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
DATA = $(plugin_DATA) $(polkit_policy_DATA)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
ALL_LINGUAS = @ALL_LINGUAS@
ALSA_CFLAGS = @ALSA_CFLAGS@
ALSA_LIBS = @ALSA_LIBS@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BACKLIGHT_HELPER_CFLAGS = @BACKLIGHT_HELPER_CFLAGS@
BACKLIGHT_HELPER_LIBS = @BACKLIGHT_HELPER_LIBS@
CATALOGS = @CATALOGS@
CATOBJEXT = @CATOBJEXT@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
COLOR_CFLAGS = @COLOR_CFLAGS@
COLOR_LIBS = @COLOR_LIBS@
COMMON_CFLAGS = @COMMON_CFLAGS@
COMMON_LIBS = @COMMON_LIBS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CUPS_CFLAGS = @CUPS_CFLAGS@
CUPS_CONFIG = @CUPS_CONFIG@
CUPS_CPPFLAGS = @CUPS_CPPFLAGS@
CUPS_LIBS = @CUPS_LIBS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DATADIRNAME = @DATADIRNAME@
DATETIME_CFLAGS = @DATETIME_CFLAGS@
DATETIME_LIBS = @DATETIME_LIBS@
DEBUG_CFLAGS = @DEBUG_CFLAGS@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GETTEXT_PACKAGE = @GETTEXT_PACKAGE@
GIOUNIX_CFLAGS = @GIOUNIX_CFLAGS@
GIOUNIX_LIBS = @GIOUNIX_LIBS@
GLIB_COMPILE_SCHEMAS = @GLIB_COMPILE_SCHEMAS@
GLIB_GENMARSHAL = @GLIB_GENMARSHAL@
GLIB_MKENUMS = @GLIB_MKENUMS@
GMOFILES = @GMOFILES@
GMSGFMT = @GMSGFMT@
GNOME_DESKTOP_CFLAGS = @GNOME_DESKTOP_CFLAGS@
GNOME_DESKTOP_LIBS = @GNOME_DESKTOP_LIBS@
GREP = @GREP@
GSD_API_VERSION = @GSD_API_VERSION@
GSD_INTLTOOL_PLUGIN_RULE = @GSD_INTLTOOL_PLUGIN_RULE@
GSD_PLUGIN_LDFLAGS = @GSD_PLUGIN_LDFLAGS@
GSETTINGS_DISABLE_SCHEMAS_COMPILE = @GSETTINGS_DISABLE_SCHEMAS_COMPILE@
GUDEV_CFLAGS = @GUDEV_CFLAGS@
GUDEV_LIBS = @GUDEV_LIBS@
GVC_CFLAGS = @GVC_CFLAGS@
GVC_LIBS = @GVC_LIBS@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSTOBJEXT = @INSTOBJEXT@
INTLLIBS = @INTLLIBS@
INTLTOOL_EXTRACT = @INTLTOOL_EXTRACT@
INTLTOOL_MERGE = @INTLTOOL_MERGE@
INTLTOOL_PERL = @INTLTOOL_PERL@
INTLTOOL_UPDATE = @INTLTOOL_UPDATE@
INTLTOOL_V_MERGE = @INTLTOOL_V_MERGE@
INTLTOOL_V_MERGE_OPTIONS = @INTLTOOL_V_MERGE_OPTIONS@
INTLTOOL__v_MERGE_ = @INTLTOOL__v_MERGE_@
INTLTOOL__v_MERGE_0 = @INTLTOOL__v_MERGE_0@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBM = @LIBM@
LIBNOTIFY_CFLAGS = @LIBNOTIFY_CFLAGS@
LIBNOTIFY_LIBS = @LIBNOTIFY_LIBS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIBWACOM_CFLAGS = @LIBWACOM_CFLAGS@
LIBWACOM_LIBS = @LIBWACOM_LIBS@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MEDIA_KEYS_CFLAGS = @MEDIA_KEYS_CFLAGS@
MEDIA_KEYS_LIBS = @MEDIA_KEYS_LIBS@
MKDIR_P = @MKDIR_P@
MKINSTALLDIRS = @MKINSTALLDIRS@
MOUSE_CFLAGS = @MOUSE_CFLAGS@
MOUSE_LIBS = @MOUSE_LIBS@
MSGFMT = @MSGFMT@
MSGFMT_OPTS = @MSGFMT_OPTS@
MSGMERGE = @MSGMERGE@
NM = @NM@
NMEDIT = @NMEDIT@
NSS_CFLAGS = @NSS_CFLAGS@
NSS_DATABASE = @NSS_DATABASE@
NSS_LIBS = @NSS_LIBS@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
ORIENTATION_CFLAGS = @ORIENTATION_CFLAGS@
ORIENTATION_LIBS = @ORIENTATION_LIBS@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
PLUGIN_CFLAGS = @PLUGIN_CFLAGS@
POFILES = @POFILES@
POSUB = @POSUB@
POWER_CFLAGS = @POWER_CFLAGS@
POWER_LIBS = @POWER_LIBS@
PO_IN_DATADIR_FALSE = @PO_IN_DATADIR_FALSE@
PO_IN_DATADIR_TRUE = @PO_IN_DATADIR_TRUE@
RANLIB = @RANLIB@
SED = @SED@
SETTINGS_DAEMON_CFLAGS = @SETTINGS_DAEMON_CFLAGS@
SETTINGS_DAEMON_LIBS = @SETTINGS_DAEMON_LIBS@
SETTINGS_PLUGIN_CFLAGS = @SETTINGS_PLUGIN_CFLAGS@
SETTINGS_PLUGIN_LIBS = @SETTINGS_PLUGIN_LIBS@
SET_MAKE = @SET_MAKE@
SHARING_CFLAGS = @SHARING_CFLAGS@
SHARING_LIBS = @SHARING_LIBS@
SHELL = @SHELL@
SOUND_CFLAGS = @SOUND_CFLAGS@
SOUND_LIBS = @SOUND_LIBS@
STRIP = @STRIP@
USE_NLS = @USE_NLS@
VERSION = @VERSION@
WACOM_CFLAGS = @WACOM_CFLAGS@
WACOM_LIBS = @WACOM_LIBS@
WACOM_OLED_CFLAGS = @WACOM_OLED_CFLAGS@
WACOM_OLED_LIBS = @WACOM_OLED_LIBS@
WARN_CFLAGS = @WARN_CFLAGS@
WAYLAND_CFLAGS = @WAYLAND_CFLAGS@
WAYLAND_LIBS = @WAYLAND_LIBS@
XGETTEXT = @XGETTEXT@
XRANDR_CFLAGS = @XRANDR_CFLAGS@
XRANDR_LIBS = @XRANDR_LIBS@
XSETTINGS_CFLAGS = @XSETTINGS_CFLAGS@
XSETTINGS_LIBS = @XSETTINGS_LIBS@
XSLTPROC = @XSLTPROC@
XTEST_CFLAGS = @XTEST_CFLAGS@
XTEST_LIBS = @XTEST_LIBS@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
gsettingsschemadir = @gsettingsschemadir@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
intltool__v_merge_options_ = @intltool__v_merge_options_@
intltool__v_merge_options_0 = @intltool__v_merge_options_0@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
plugindir = @plugindir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
plugin_name = wacom
plugin_LTLIBRARIES = libgsdwacom.la
libgsdwacom_la_SOURCES = \
	gsd-wacom-plugin.c	\
	gsd-wacom-manager.h	\
	gsd-wacom-manager.c	\
	gsd-wacom-key-shortcut-button.h	\
	gsd-wacom-key-shortcut-button.c	\
	gsd-wacom-button-editor.h	\
	gsd-wacom-button-editor.c	\
	gsd-wacom-osd-window.h	\
	gsd-wacom-osd-window.c	\
	gsd-wacom-oled.h	\
	gsd-wacom-oled.c	\
	gsd-wacom-oled-constants.h \
	gsd-wacom-device.c	\
	gsd-wacom-device.h	\
	gsd-wacom-resources.c

libgsdwacom_la_CPPFLAGS = \
	-I$(top_srcdir)/gnome-settings-daemon		\
	-I$(top_builddir)/gnome-settings-daemon		\
	-I$(top_srcdir)/plugins/common/			\
	-I$(top_srcdir)/data/				\
	-DGNOME_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\" \
	-DLIBEXECDIR=\""$(libexecdir)"\" 		\
	$(AM_CPPFLAGS)

libgsdwacom_la_CFLAGS = \
	$(PLUGIN_CFLAGS)		\
	$(SETTINGS_PLUGIN_CFLAGS)	\
	$(WACOM_CFLAGS)			\
	$(AM_CFLAGS)

libgsdwacom_la_LDFLAGS = \
	$(GSD_PLUGIN_LDFLAGS)

libgsdwacom_la_LIBADD = \
	$(top_builddir)/plugins/common/libcommon.la			\
	$(SETTINGS_PLUGIN_LIBS)						\
	$(WACOM_LIBS)

polkit_policydir = $(datadir)/polkit-1/actions
polkit_policy_in_files = org.gnome.settings-daemon.plugins.wacom.policy.in
polkit_policy_DATA = $(polkit_policy_in_files:.policy.in=.policy)

# so it always gets included in the tarball
gsd_wacom_led_helper_SOURCES = gsd-wacom-led-helper.c
gsd_wacom_oled_helper_SOURCES = gsd-wacom-oled-helper.c gsd-wacom-oled-constants.h
EXTRA_DIST = $(gsd_wacom_led_helper_SOURCES) wacom.gresource.xml \
	tablet-layout.css $(gsd_wacom_oled_helper_SOURCES) \
	org.gnome.settings-daemon.plugins.wacom.policy.in.in \
	$(plugin_in_files) README.config-storage
@HAVE_GUDEV_TRUE@gsd_wacom_led_helper_LDFLAGS = \
@HAVE_GUDEV_TRUE@	$(BACKLIGHT_HELPER_LIBS)			\
@HAVE_GUDEV_TRUE@	-lm

@HAVE_GUDEV_TRUE@gsd_wacom_oled_helper_LDFLAGS = \
@HAVE_GUDEV_TRUE@	$(WACOM_OLED_LIBS)				\
@HAVE_GUDEV_TRUE@	-lm

@HAVE_GUDEV_TRUE@gsd_wacom_led_helper_CFLAGS = \
@HAVE_GUDEV_TRUE@	$(BACKLIGHT_HELPER_CFLAGS)

@HAVE_GUDEV_TRUE@gsd_wacom_oled_helper_CFLAGS = \
@HAVE_GUDEV_TRUE@	$(WACOM_OLED_CFLAGS)

gsd_test_wacom_SOURCES = \
	test-wacom.c		\
	gsd-wacom-manager.c	\
	gsd-wacom-manager.h	\
	gsd-wacom-key-shortcut-button.h	\
	gsd-wacom-key-shortcut-button.c	\
	gsd-wacom-button-editor.h	\
	gsd-wacom-button-editor.c	\
	gsd-wacom-osd-window.h	\
	gsd-wacom-osd-window.c	\
	gsd-wacom-oled.h	\
	gsd-wacom-oled.c	\
	gsd-wacom-device.c	\
	gsd-wacom-device.h	\
	gsd-wacom-resources.c

gsd_test_wacom_CPPFLAGS = \
	-I$(top_srcdir)/data/					\
	-I$(top_srcdir)/gnome-settings-daemon			\
	-I$(top_builddir)/gnome-settings-daemon		\
	-I$(top_srcdir)/plugins/common				\
	-DBINDIR=\"$(bindir)\"					\
	-DPIXMAPDIR=\""$(pkgdatadir)"\"				\
	-DGTKBUILDERDIR=\""$(pkgdatadir)"\"			\
	-DGNOME_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\"	\
	-DLIBEXECDIR=\""$(libexecdir)"\"			\
	-DSCHEMA_NAME=\""gsdwacom"\"				\
	$(AM_CPPFLAGS)

gsd_test_wacom_CFLAGS = \
	$(PLUGIN_CFLAGS)		\
	$(SETTINGS_PLUGIN_CFLAGS)	\
	$(WACOM_CFLAGS)			\
	$(AM_CFLAGS)

gsd_test_wacom_LDADD = \
	$(top_builddir)/gnome-settings-daemon/libgsd.la		\
	$(top_builddir)/plugins/common/libcommon.la		\
	$(SETTINGS_DAEMON_LIBS)					\
	$(SETTINGS_PLUGIN_LIBS)					\
	$(WACOM_LIBS)						\
	-lm

gsd_list_wacom_SOURCES = \
	list-wacom.c		\
	gsd-wacom-device.c	\
	gsd-wacom-device.h

gsd_list_wacom_CPPFLAGS = \
	-I$(top_srcdir)/data/					\
	-I$(top_srcdir)/gnome-settings-daemon			\
	-I$(top_builddir)/gnome-settings-daemon			\
	-I$(top_srcdir)/plugins/common				\
	-DBINDIR=\"$(bindir)\"					\
	-DPIXMAPDIR=\""$(pkgdatadir)"\"				\
	-DGTKBUILDERDIR=\""$(pkgdatadir)"\"			\
	-DGNOME_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\"	\
	$(AM_CPPFLAGS)

gsd_list_wacom_CFLAGS = \
	$(SETTINGS_PLUGIN_CFLAGS)	\
	$(WACOM_CFLAGS)			\
	$(AM_CFLAGS)

gsd_list_wacom_LDADD = \
	$(top_builddir)/gnome-settings-daemon/libgsd.la		\
	$(top_builddir)/plugins/common/libcommon.la		\
	$(SETTINGS_DAEMON_LIBS)					\
	$(SETTINGS_PLUGIN_LIBS)					\
	$(WACOM_LIBS)						\
	-lm

gsd_test_wacom_osd_SOURCES = \
	test-osd-window.c					\
	gsd-wacom-key-shortcut-button.h				\
	gsd-wacom-key-shortcut-button.c				\
	gsd-wacom-button-editor.h				\
	gsd-wacom-button-editor.c				\
	gsd-wacom-osd-window.h					\
	gsd-wacom-osd-window.c					\
	gsd-wacom-device.c					\
	gsd-wacom-device.h					\
	gsd-wacom-resources.c

gsd_test_wacom_osd_CPPFLAGS = \
	-I$(top_srcdir)/data/					\
	-I$(top_srcdir)/gnome-settings-daemon			\
	-I$(top_builddir)/gnome-settings-daemon			\
	-I$(top_srcdir)/plugins/common				\
	-DBINDIR=\"$(bindir)\"					\
	-DPIXMAPDIR=\""$(pkgdatadir)"\"				\
	-DGTKBUILDERDIR=\""$(pkgdatadir)"\"			\
	-DGNOME_SETTINGS_LOCALEDIR=\""$(datadir)/locale"\"	\
	-DLIBEXECDIR=\""$(libexecdir)"\"			\
	$(AM_CPPFLAGS)

gsd_test_wacom_osd_CFLAGS = \
	$(SETTINGS_PLUGIN_CFLAGS)				\
	$(WACOM_CFLAGS)						\
	$(AM_CFLAGS)

gsd_test_wacom_osd_LDADD = \
	$(top_builddir)/gnome-settings-daemon/libgsd.la		\
	$(top_builddir)/plugins/common/libcommon.la		\
	$(SETTINGS_DAEMON_LIBS)					\
	$(SETTINGS_PLUGIN_LIBS)					\
	$(WACOM_LIBS)						\
	-lm

plugin_in_files = wacom.gnome-settings-plugin.in
plugin_DATA = $(plugin_in_files:.gnome-settings-plugin.in=.gnome-settings-plugin)
CLEANFILES = \
	$(plugin_DATA)					\
	gsd-wacom-resources.c				\
	org.gnome.settings-daemon.plugins.wacom.policy	\
	org.gnome.settings-daemon.plugins.wacom.policy.in

all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu plugins/wacom/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu plugins/wacom/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

install-pluginLTLIBRARIES: $(plugin_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	@list='$(plugin_LTLIBRARIES)'; test -n "$(plugindir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(MKDIR_P) '$(DESTDIR)$(plugindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(plugindir)" || exit 1; \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(plugindir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(plugindir)"; \
	}

uninstall-pluginLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(plugin_LTLIBRARIES)'; test -n "$(plugindir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(plugindir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(plugindir)/$$f"; \
	done

clean-pluginLTLIBRARIES:
	-test -z "$(plugin_LTLIBRARIES)" || rm -f $(plugin_LTLIBRARIES)
	@list='$(plugin_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}

libgsdwacom.la: $(libgsdwacom_la_OBJECTS) $(libgsdwacom_la_DEPENDENCIES) $(EXTRA_libgsdwacom_la_DEPENDENCIES) 
	$(AM_V_CCLD)$(libgsdwacom_la_LINK) -rpath $(plugindir) $(libgsdwacom_la_OBJECTS) $(libgsdwacom_la_LIBADD) $(LIBS)
install-libexecPROGRAMS: $(libexec_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(libexec_PROGRAMS)'; test -n "$(libexecdir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(libexecdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(libexecdir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(libexecdir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(libexecdir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-libexecPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(libexec_PROGRAMS)'; test -n "$(libexecdir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libexecdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(libexecdir)" && rm -f $$files

clean-libexecPROGRAMS:
	@list='$(libexec_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

gsd-list-wacom$(EXEEXT): $(gsd_list_wacom_OBJECTS) $(gsd_list_wacom_DEPENDENCIES) $(EXTRA_gsd_list_wacom_DEPENDENCIES) 
	@rm -f gsd-list-wacom$(EXEEXT)
	$(AM_V_CCLD)$(gsd_list_wacom_LINK) $(gsd_list_wacom_OBJECTS) $(gsd_list_wacom_LDADD) $(LIBS)

gsd-test-wacom$(EXEEXT): $(gsd_test_wacom_OBJECTS) $(gsd_test_wacom_DEPENDENCIES) $(EXTRA_gsd_test_wacom_DEPENDENCIES) 
	@rm -f gsd-test-wacom$(EXEEXT)
	$(AM_V_CCLD)$(gsd_test_wacom_LINK) $(gsd_test_wacom_OBJECTS) $(gsd_test_wacom_LDADD) $(LIBS)

gsd-test-wacom-osd$(EXEEXT): $(gsd_test_wacom_osd_OBJECTS) $(gsd_test_wacom_osd_DEPENDENCIES) $(EXTRA_gsd_test_wacom_osd_DEPENDENCIES) 
	@rm -f gsd-test-wacom-osd$(EXEEXT)
	$(AM_V_CCLD)$(gsd_test_wacom_osd_LINK) $(gsd_test_wacom_osd_OBJECTS) $(gsd_test_wacom_osd_LDADD) $(LIBS)

gsd-wacom-led-helper$(EXEEXT): $(gsd_wacom_led_helper_OBJECTS) $(gsd_wacom_led_helper_DEPENDENCIES) $(EXTRA_gsd_wacom_led_helper_DEPENDENCIES) 
	@rm -f gsd-wacom-led-helper$(EXEEXT)
	$(AM_V_CCLD)$(gsd_wacom_led_helper_LINK) $(gsd_wacom_led_helper_OBJECTS) $(gsd_wacom_led_helper_LDADD) $(LIBS)

gsd-wacom-oled-helper$(EXEEXT): $(gsd_wacom_oled_helper_OBJECTS) $(gsd_wacom_oled_helper_DEPENDENCIES) $(EXTRA_gsd_wacom_oled_helper_DEPENDENCIES) 
	@rm -f gsd-wacom-oled-helper$(EXEEXT)
	$(AM_V_CCLD)$(gsd_wacom_oled_helper_LINK) $(gsd_wacom_oled_helper_OBJECTS) $(gsd_wacom_oled_helper_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_list_wacom-list-wacom.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom-test-wacom.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_wacom_led_helper-gsd-wacom-led-helper.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gsd_wacom_oled_helper-gsd-wacom-oled-helper.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsdwacom_la-gsd-wacom-button-editor.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsdwacom_la-gsd-wacom-device.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsdwacom_la-gsd-wacom-key-shortcut-button.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsdwacom_la-gsd-wacom-manager.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsdwacom_la-gsd-wacom-oled.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsdwacom_la-gsd-wacom-osd-window.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsdwacom_la-gsd-wacom-plugin.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgsdwacom_la-gsd-wacom-resources.Plo@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<

.c.obj:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<

libgsdwacom_la-gsd-wacom-plugin.lo: gsd-wacom-plugin.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-plugin.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-plugin.Tpo -c -o libgsdwacom_la-gsd-wacom-plugin.lo `test -f 'gsd-wacom-plugin.c' || echo '$(srcdir)/'`gsd-wacom-plugin.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-plugin.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-plugin.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-plugin.c' object='libgsdwacom_la-gsd-wacom-plugin.lo' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-plugin.lo `test -f 'gsd-wacom-plugin.c' || echo '$(srcdir)/'`gsd-wacom-plugin.c

libgsdwacom_la-gsd-wacom-manager.lo: gsd-wacom-manager.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-manager.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-manager.Tpo -c -o libgsdwacom_la-gsd-wacom-manager.lo `test -f 'gsd-wacom-manager.c' || echo '$(srcdir)/'`gsd-wacom-manager.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-manager.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-manager.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-manager.c' object='libgsdwacom_la-gsd-wacom-manager.lo' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-manager.lo `test -f 'gsd-wacom-manager.c' || echo '$(srcdir)/'`gsd-wacom-manager.c

libgsdwacom_la-gsd-wacom-key-shortcut-button.lo: gsd-wacom-key-shortcut-button.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-key-shortcut-button.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-key-shortcut-button.Tpo -c -o libgsdwacom_la-gsd-wacom-key-shortcut-button.lo `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-key-shortcut-button.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='libgsdwacom_la-gsd-wacom-key-shortcut-button.lo' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-key-shortcut-button.lo `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c

libgsdwacom_la-gsd-wacom-button-editor.lo: gsd-wacom-button-editor.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-button-editor.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-button-editor.Tpo -c -o libgsdwacom_la-gsd-wacom-button-editor.lo `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-button-editor.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-button-editor.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='libgsdwacom_la-gsd-wacom-button-editor.lo' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-button-editor.lo `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c

libgsdwacom_la-gsd-wacom-osd-window.lo: gsd-wacom-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-osd-window.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-osd-window.Tpo -c -o libgsdwacom_la-gsd-wacom-osd-window.lo `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-osd-window.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-osd-window.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='libgsdwacom_la-gsd-wacom-osd-window.lo' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-osd-window.lo `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c

libgsdwacom_la-gsd-wacom-oled.lo: gsd-wacom-oled.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-oled.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-oled.Tpo -c -o libgsdwacom_la-gsd-wacom-oled.lo `test -f 'gsd-wacom-oled.c' || echo '$(srcdir)/'`gsd-wacom-oled.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-oled.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-oled.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-oled.c' object='libgsdwacom_la-gsd-wacom-oled.lo' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-oled.lo `test -f 'gsd-wacom-oled.c' || echo '$(srcdir)/'`gsd-wacom-oled.c

libgsdwacom_la-gsd-wacom-device.lo: gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-device.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-device.Tpo -c -o libgsdwacom_la-gsd-wacom-device.lo `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-device.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-device.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-device.c' object='libgsdwacom_la-gsd-wacom-device.lo' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-device.lo `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c

libgsdwacom_la-gsd-wacom-resources.lo: gsd-wacom-resources.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -MT libgsdwacom_la-gsd-wacom-resources.lo -MD -MP -MF $(DEPDIR)/libgsdwacom_la-gsd-wacom-resources.Tpo -c -o libgsdwacom_la-gsd-wacom-resources.lo `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgsdwacom_la-gsd-wacom-resources.Tpo $(DEPDIR)/libgsdwacom_la-gsd-wacom-resources.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-resources.c' object='libgsdwacom_la-gsd-wacom-resources.lo' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgsdwacom_la_CPPFLAGS) $(CPPFLAGS) $(libgsdwacom_la_CFLAGS) $(CFLAGS) -c -o libgsdwacom_la-gsd-wacom-resources.lo `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c

gsd_list_wacom-list-wacom.o: list-wacom.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -MT gsd_list_wacom-list-wacom.o -MD -MP -MF $(DEPDIR)/gsd_list_wacom-list-wacom.Tpo -c -o gsd_list_wacom-list-wacom.o `test -f 'list-wacom.c' || echo '$(srcdir)/'`list-wacom.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_list_wacom-list-wacom.Tpo $(DEPDIR)/gsd_list_wacom-list-wacom.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='list-wacom.c' object='gsd_list_wacom-list-wacom.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -c -o gsd_list_wacom-list-wacom.o `test -f 'list-wacom.c' || echo '$(srcdir)/'`list-wacom.c

gsd_list_wacom-list-wacom.obj: list-wacom.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -MT gsd_list_wacom-list-wacom.obj -MD -MP -MF $(DEPDIR)/gsd_list_wacom-list-wacom.Tpo -c -o gsd_list_wacom-list-wacom.obj `if test -f 'list-wacom.c'; then $(CYGPATH_W) 'list-wacom.c'; else $(CYGPATH_W) '$(srcdir)/list-wacom.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_list_wacom-list-wacom.Tpo $(DEPDIR)/gsd_list_wacom-list-wacom.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='list-wacom.c' object='gsd_list_wacom-list-wacom.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -c -o gsd_list_wacom-list-wacom.obj `if test -f 'list-wacom.c'; then $(CYGPATH_W) 'list-wacom.c'; else $(CYGPATH_W) '$(srcdir)/list-wacom.c'; fi`

gsd_list_wacom-gsd-wacom-device.o: gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -MT gsd_list_wacom-gsd-wacom-device.o -MD -MP -MF $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Tpo -c -o gsd_list_wacom-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Tpo $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_list_wacom-gsd-wacom-device.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -c -o gsd_list_wacom-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c

gsd_list_wacom-gsd-wacom-device.obj: gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -MT gsd_list_wacom-gsd-wacom-device.obj -MD -MP -MF $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Tpo -c -o gsd_list_wacom-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Tpo $(DEPDIR)/gsd_list_wacom-gsd-wacom-device.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_list_wacom-gsd-wacom-device.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_list_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_list_wacom_CFLAGS) $(CFLAGS) -c -o gsd_list_wacom-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`

gsd_test_wacom-test-wacom.o: test-wacom.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-test-wacom.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-test-wacom.Tpo -c -o gsd_test_wacom-test-wacom.o `test -f 'test-wacom.c' || echo '$(srcdir)/'`test-wacom.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-test-wacom.Tpo $(DEPDIR)/gsd_test_wacom-test-wacom.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='test-wacom.c' object='gsd_test_wacom-test-wacom.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-test-wacom.o `test -f 'test-wacom.c' || echo '$(srcdir)/'`test-wacom.c

gsd_test_wacom-test-wacom.obj: test-wacom.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-test-wacom.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-test-wacom.Tpo -c -o gsd_test_wacom-test-wacom.obj `if test -f 'test-wacom.c'; then $(CYGPATH_W) 'test-wacom.c'; else $(CYGPATH_W) '$(srcdir)/test-wacom.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-test-wacom.Tpo $(DEPDIR)/gsd_test_wacom-test-wacom.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='test-wacom.c' object='gsd_test_wacom-test-wacom.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-test-wacom.obj `if test -f 'test-wacom.c'; then $(CYGPATH_W) 'test-wacom.c'; else $(CYGPATH_W) '$(srcdir)/test-wacom.c'; fi`

gsd_test_wacom-gsd-wacom-manager.o: gsd-wacom-manager.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-manager.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Tpo -c -o gsd_test_wacom-gsd-wacom-manager.o `test -f 'gsd-wacom-manager.c' || echo '$(srcdir)/'`gsd-wacom-manager.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-manager.c' object='gsd_test_wacom-gsd-wacom-manager.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-manager.o `test -f 'gsd-wacom-manager.c' || echo '$(srcdir)/'`gsd-wacom-manager.c

gsd_test_wacom-gsd-wacom-manager.obj: gsd-wacom-manager.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-manager.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Tpo -c -o gsd_test_wacom-gsd-wacom-manager.obj `if test -f 'gsd-wacom-manager.c'; then $(CYGPATH_W) 'gsd-wacom-manager.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-manager.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-manager.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-manager.c' object='gsd_test_wacom-gsd-wacom-manager.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-manager.obj `if test -f 'gsd-wacom-manager.c'; then $(CYGPATH_W) 'gsd-wacom-manager.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-manager.c'; fi`

gsd_test_wacom-gsd-wacom-key-shortcut-button.o: gsd-wacom-key-shortcut-button.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-key-shortcut-button.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Tpo -c -o gsd_test_wacom-gsd-wacom-key-shortcut-button.o `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='gsd_test_wacom-gsd-wacom-key-shortcut-button.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-key-shortcut-button.o `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c

gsd_test_wacom-gsd-wacom-key-shortcut-button.obj: gsd-wacom-key-shortcut-button.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-key-shortcut-button.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Tpo -c -o gsd_test_wacom-gsd-wacom-key-shortcut-button.obj `if test -f 'gsd-wacom-key-shortcut-button.c'; then $(CYGPATH_W) 'gsd-wacom-key-shortcut-button.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-key-shortcut-button.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-key-shortcut-button.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='gsd_test_wacom-gsd-wacom-key-shortcut-button.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-key-shortcut-button.obj `if test -f 'gsd-wacom-key-shortcut-button.c'; then $(CYGPATH_W) 'gsd-wacom-key-shortcut-button.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-key-shortcut-button.c'; fi`

gsd_test_wacom-gsd-wacom-button-editor.o: gsd-wacom-button-editor.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-button-editor.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Tpo -c -o gsd_test_wacom-gsd-wacom-button-editor.o `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='gsd_test_wacom-gsd-wacom-button-editor.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-button-editor.o `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c

gsd_test_wacom-gsd-wacom-button-editor.obj: gsd-wacom-button-editor.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-button-editor.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Tpo -c -o gsd_test_wacom-gsd-wacom-button-editor.obj `if test -f 'gsd-wacom-button-editor.c'; then $(CYGPATH_W) 'gsd-wacom-button-editor.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-button-editor.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-button-editor.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='gsd_test_wacom-gsd-wacom-button-editor.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-button-editor.obj `if test -f 'gsd-wacom-button-editor.c'; then $(CYGPATH_W) 'gsd-wacom-button-editor.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-button-editor.c'; fi`

gsd_test_wacom-gsd-wacom-osd-window.o: gsd-wacom-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-osd-window.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Tpo -c -o gsd_test_wacom-gsd-wacom-osd-window.o `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='gsd_test_wacom-gsd-wacom-osd-window.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-osd-window.o `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c

gsd_test_wacom-gsd-wacom-osd-window.obj: gsd-wacom-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-osd-window.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Tpo -c -o gsd_test_wacom-gsd-wacom-osd-window.obj `if test -f 'gsd-wacom-osd-window.c'; then $(CYGPATH_W) 'gsd-wacom-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-osd-window.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-osd-window.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='gsd_test_wacom-gsd-wacom-osd-window.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-osd-window.obj `if test -f 'gsd-wacom-osd-window.c'; then $(CYGPATH_W) 'gsd-wacom-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-osd-window.c'; fi`

gsd_test_wacom-gsd-wacom-oled.o: gsd-wacom-oled.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-oled.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Tpo -c -o gsd_test_wacom-gsd-wacom-oled.o `test -f 'gsd-wacom-oled.c' || echo '$(srcdir)/'`gsd-wacom-oled.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-oled.c' object='gsd_test_wacom-gsd-wacom-oled.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-oled.o `test -f 'gsd-wacom-oled.c' || echo '$(srcdir)/'`gsd-wacom-oled.c

gsd_test_wacom-gsd-wacom-oled.obj: gsd-wacom-oled.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-oled.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Tpo -c -o gsd_test_wacom-gsd-wacom-oled.obj `if test -f 'gsd-wacom-oled.c'; then $(CYGPATH_W) 'gsd-wacom-oled.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-oled.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-oled.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-oled.c' object='gsd_test_wacom-gsd-wacom-oled.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-oled.obj `if test -f 'gsd-wacom-oled.c'; then $(CYGPATH_W) 'gsd-wacom-oled.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-oled.c'; fi`

gsd_test_wacom-gsd-wacom-device.o: gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-device.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Tpo -c -o gsd_test_wacom-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_test_wacom-gsd-wacom-device.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c

gsd_test_wacom-gsd-wacom-device.obj: gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-device.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Tpo -c -o gsd_test_wacom-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-device.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_test_wacom-gsd-wacom-device.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`

gsd_test_wacom-gsd-wacom-resources.o: gsd-wacom-resources.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-resources.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Tpo -c -o gsd_test_wacom-gsd-wacom-resources.o `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-resources.c' object='gsd_test_wacom-gsd-wacom-resources.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-resources.o `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c

gsd_test_wacom-gsd-wacom-resources.obj: gsd-wacom-resources.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -MT gsd_test_wacom-gsd-wacom-resources.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Tpo -c -o gsd_test_wacom-gsd-wacom-resources.obj `if test -f 'gsd-wacom-resources.c'; then $(CYGPATH_W) 'gsd-wacom-resources.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-resources.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Tpo $(DEPDIR)/gsd_test_wacom-gsd-wacom-resources.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-resources.c' object='gsd_test_wacom-gsd-wacom-resources.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom-gsd-wacom-resources.obj `if test -f 'gsd-wacom-resources.c'; then $(CYGPATH_W) 'gsd-wacom-resources.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-resources.c'; fi`

gsd_test_wacom_osd-test-osd-window.o: test-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-test-osd-window.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Tpo -c -o gsd_test_wacom_osd-test-osd-window.o `test -f 'test-osd-window.c' || echo '$(srcdir)/'`test-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Tpo $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='test-osd-window.c' object='gsd_test_wacom_osd-test-osd-window.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-test-osd-window.o `test -f 'test-osd-window.c' || echo '$(srcdir)/'`test-osd-window.c

gsd_test_wacom_osd-test-osd-window.obj: test-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-test-osd-window.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Tpo -c -o gsd_test_wacom_osd-test-osd-window.obj `if test -f 'test-osd-window.c'; then $(CYGPATH_W) 'test-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/test-osd-window.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Tpo $(DEPDIR)/gsd_test_wacom_osd-test-osd-window.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='test-osd-window.c' object='gsd_test_wacom_osd-test-osd-window.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-test-osd-window.obj `if test -f 'test-osd-window.c'; then $(CYGPATH_W) 'test-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/test-osd-window.c'; fi`

gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o: gsd-wacom-key-shortcut-button.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.o `test -f 'gsd-wacom-key-shortcut-button.c' || echo '$(srcdir)/'`gsd-wacom-key-shortcut-button.c

gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj: gsd-wacom-key-shortcut-button.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj `if test -f 'gsd-wacom-key-shortcut-button.c'; then $(CYGPATH_W) 'gsd-wacom-key-shortcut-button.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-key-shortcut-button.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-key-shortcut-button.c' object='gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-key-shortcut-button.obj `if test -f 'gsd-wacom-key-shortcut-button.c'; then $(CYGPATH_W) 'gsd-wacom-key-shortcut-button.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-key-shortcut-button.c'; fi`

gsd_test_wacom_osd-gsd-wacom-button-editor.o: gsd-wacom-button-editor.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-button-editor.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-button-editor.o `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='gsd_test_wacom_osd-gsd-wacom-button-editor.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-button-editor.o `test -f 'gsd-wacom-button-editor.c' || echo '$(srcdir)/'`gsd-wacom-button-editor.c

gsd_test_wacom_osd-gsd-wacom-button-editor.obj: gsd-wacom-button-editor.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-button-editor.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-button-editor.obj `if test -f 'gsd-wacom-button-editor.c'; then $(CYGPATH_W) 'gsd-wacom-button-editor.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-button-editor.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-button-editor.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-button-editor.c' object='gsd_test_wacom_osd-gsd-wacom-button-editor.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-button-editor.obj `if test -f 'gsd-wacom-button-editor.c'; then $(CYGPATH_W) 'gsd-wacom-button-editor.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-button-editor.c'; fi`

gsd_test_wacom_osd-gsd-wacom-osd-window.o: gsd-wacom-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-osd-window.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-osd-window.o `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='gsd_test_wacom_osd-gsd-wacom-osd-window.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-osd-window.o `test -f 'gsd-wacom-osd-window.c' || echo '$(srcdir)/'`gsd-wacom-osd-window.c

gsd_test_wacom_osd-gsd-wacom-osd-window.obj: gsd-wacom-osd-window.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-osd-window.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-osd-window.obj `if test -f 'gsd-wacom-osd-window.c'; then $(CYGPATH_W) 'gsd-wacom-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-osd-window.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-osd-window.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-osd-window.c' object='gsd_test_wacom_osd-gsd-wacom-osd-window.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-osd-window.obj `if test -f 'gsd-wacom-osd-window.c'; then $(CYGPATH_W) 'gsd-wacom-osd-window.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-osd-window.c'; fi`

gsd_test_wacom_osd-gsd-wacom-device.o: gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-device.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_test_wacom_osd-gsd-wacom-device.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-device.o `test -f 'gsd-wacom-device.c' || echo '$(srcdir)/'`gsd-wacom-device.c

gsd_test_wacom_osd-gsd-wacom-device.obj: gsd-wacom-device.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-device.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-device.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-device.c' object='gsd_test_wacom_osd-gsd-wacom-device.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-device.obj `if test -f 'gsd-wacom-device.c'; then $(CYGPATH_W) 'gsd-wacom-device.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-device.c'; fi`

gsd_test_wacom_osd-gsd-wacom-resources.o: gsd-wacom-resources.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-resources.o -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-resources.o `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-resources.c' object='gsd_test_wacom_osd-gsd-wacom-resources.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-resources.o `test -f 'gsd-wacom-resources.c' || echo '$(srcdir)/'`gsd-wacom-resources.c

gsd_test_wacom_osd-gsd-wacom-resources.obj: gsd-wacom-resources.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -MT gsd_test_wacom_osd-gsd-wacom-resources.obj -MD -MP -MF $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Tpo -c -o gsd_test_wacom_osd-gsd-wacom-resources.obj `if test -f 'gsd-wacom-resources.c'; then $(CYGPATH_W) 'gsd-wacom-resources.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-resources.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Tpo $(DEPDIR)/gsd_test_wacom_osd-gsd-wacom-resources.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-resources.c' object='gsd_test_wacom_osd-gsd-wacom-resources.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(gsd_test_wacom_osd_CPPFLAGS) $(CPPFLAGS) $(gsd_test_wacom_osd_CFLAGS) $(CFLAGS) -c -o gsd_test_wacom_osd-gsd-wacom-resources.obj `if test -f 'gsd-wacom-resources.c'; then $(CYGPATH_W) 'gsd-wacom-resources.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-resources.c'; fi`

gsd_wacom_led_helper-gsd-wacom-led-helper.o: gsd-wacom-led-helper.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(gsd_wacom_led_helper_CFLAGS) $(CFLAGS) -MT gsd_wacom_led_helper-gsd-wacom-led-helper.o -MD -MP -MF $(DEPDIR)/gsd_wacom_led_helper-gsd-wacom-led-helper.Tpo -c -o gsd_wacom_led_helper-gsd-wacom-led-helper.o `test -f 'gsd-wacom-led-helper.c' || echo '$(srcdir)/'`gsd-wacom-led-helper.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_wacom_led_helper-gsd-wacom-led-helper.Tpo $(DEPDIR)/gsd_wacom_led_helper-gsd-wacom-led-helper.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-led-helper.c' object='gsd_wacom_led_helper-gsd-wacom-led-helper.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(gsd_wacom_led_helper_CFLAGS) $(CFLAGS) -c -o gsd_wacom_led_helper-gsd-wacom-led-helper.o `test -f 'gsd-wacom-led-helper.c' || echo '$(srcdir)/'`gsd-wacom-led-helper.c

gsd_wacom_led_helper-gsd-wacom-led-helper.obj: gsd-wacom-led-helper.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(gsd_wacom_led_helper_CFLAGS) $(CFLAGS) -MT gsd_wacom_led_helper-gsd-wacom-led-helper.obj -MD -MP -MF $(DEPDIR)/gsd_wacom_led_helper-gsd-wacom-led-helper.Tpo -c -o gsd_wacom_led_helper-gsd-wacom-led-helper.obj `if test -f 'gsd-wacom-led-helper.c'; then $(CYGPATH_W) 'gsd-wacom-led-helper.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-led-helper.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_wacom_led_helper-gsd-wacom-led-helper.Tpo $(DEPDIR)/gsd_wacom_led_helper-gsd-wacom-led-helper.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-led-helper.c' object='gsd_wacom_led_helper-gsd-wacom-led-helper.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(gsd_wacom_led_helper_CFLAGS) $(CFLAGS) -c -o gsd_wacom_led_helper-gsd-wacom-led-helper.obj `if test -f 'gsd-wacom-led-helper.c'; then $(CYGPATH_W) 'gsd-wacom-led-helper.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-led-helper.c'; fi`

gsd_wacom_oled_helper-gsd-wacom-oled-helper.o: gsd-wacom-oled-helper.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(gsd_wacom_oled_helper_CFLAGS) $(CFLAGS) -MT gsd_wacom_oled_helper-gsd-wacom-oled-helper.o -MD -MP -MF $(DEPDIR)/gsd_wacom_oled_helper-gsd-wacom-oled-helper.Tpo -c -o gsd_wacom_oled_helper-gsd-wacom-oled-helper.o `test -f 'gsd-wacom-oled-helper.c' || echo '$(srcdir)/'`gsd-wacom-oled-helper.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_wacom_oled_helper-gsd-wacom-oled-helper.Tpo $(DEPDIR)/gsd_wacom_oled_helper-gsd-wacom-oled-helper.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-oled-helper.c' object='gsd_wacom_oled_helper-gsd-wacom-oled-helper.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(gsd_wacom_oled_helper_CFLAGS) $(CFLAGS) -c -o gsd_wacom_oled_helper-gsd-wacom-oled-helper.o `test -f 'gsd-wacom-oled-helper.c' || echo '$(srcdir)/'`gsd-wacom-oled-helper.c

gsd_wacom_oled_helper-gsd-wacom-oled-helper.obj: gsd-wacom-oled-helper.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(gsd_wacom_oled_helper_CFLAGS) $(CFLAGS) -MT gsd_wacom_oled_helper-gsd-wacom-oled-helper.obj -MD -MP -MF $(DEPDIR)/gsd_wacom_oled_helper-gsd-wacom-oled-helper.Tpo -c -o gsd_wacom_oled_helper-gsd-wacom-oled-helper.obj `if test -f 'gsd-wacom-oled-helper.c'; then $(CYGPATH_W) 'gsd-wacom-oled-helper.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-oled-helper.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/gsd_wacom_oled_helper-gsd-wacom-oled-helper.Tpo $(DEPDIR)/gsd_wacom_oled_helper-gsd-wacom-oled-helper.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='gsd-wacom-oled-helper.c' object='gsd_wacom_oled_helper-gsd-wacom-oled-helper.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(gsd_wacom_oled_helper_CFLAGS) $(CFLAGS) -c -o gsd_wacom_oled_helper-gsd-wacom-oled-helper.obj `if test -f 'gsd-wacom-oled-helper.c'; then $(CYGPATH_W) 'gsd-wacom-oled-helper.c'; else $(CYGPATH_W) '$(srcdir)/gsd-wacom-oled-helper.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-pluginDATA: $(plugin_DATA)
	@$(NORMAL_INSTALL)
	@list='$(plugin_DATA)'; test -n "$(plugindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(plugindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(plugindir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(plugindir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(plugindir)" || exit $$?; \
	done

uninstall-pluginDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(plugin_DATA)'; test -n "$(plugindir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(plugindir)'; $(am__uninstall_files_from_dir)
install-polkit_policyDATA: $(polkit_policy_DATA)
	@$(NORMAL_INSTALL)
	@list='$(polkit_policy_DATA)'; test -n "$(polkit_policydir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(polkit_policydir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(polkit_policydir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(polkit_policydir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(polkit_policydir)" || exit $$?; \
	done

uninstall-polkit_policyDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(polkit_policy_DATA)'; test -n "$(polkit_policydir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(polkit_policydir)'; $(am__uninstall_files_from_dir)

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(DATA)
installdirs:
	for dir in "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(libexecdir)" "$(DESTDIR)$(plugindir)" "$(DESTDIR)$(polkit_policydir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libexecPROGRAMS clean-libtool \
	clean-pluginLTLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-pluginDATA install-pluginLTLIBRARIES \
	install-polkit_policyDATA

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libexecPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libexecPROGRAMS uninstall-pluginDATA \
	uninstall-pluginLTLIBRARIES uninstall-polkit_policyDATA

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \
	clean-libexecPROGRAMS clean-libtool clean-pluginLTLIBRARIES \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-libexecPROGRAMS \
	install-man install-pdf install-pdf-am install-pluginDATA \
	install-pluginLTLIBRARIES install-polkit_policyDATA install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-libexecPROGRAMS uninstall-pluginDATA \
	uninstall-pluginLTLIBRARIES uninstall-polkit_policyDATA

.PRECIOUS: Makefile


org.gnome.settings-daemon.plugins.wacom.policy.in: org.gnome.settings-daemon.plugins.wacom.policy.in.in Makefile
	$(AM_V_GEN) sed -e "s|\@libexecdir\@|$(libexecdir)|" $< > $@

gsd-wacom-resources.c: wacom.gresource.xml tablet-layout.css
	glib-compile-resources 				\
		--target=$@ 				\
		--sourcedir=$(srcdir) 			\
		--generate-source 			\
		--c-name gsd_wacom 			\
		$(srcdir)/wacom.gresource.xml

@INTLTOOL_POLICY_RULE@

@GSD_INTLTOOL_PLUGIN_RULE@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
